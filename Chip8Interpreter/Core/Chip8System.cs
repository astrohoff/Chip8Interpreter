using Chip8Interpreter.Adaptors.Interfaces;

namespace Chip8Interpreter.Core
{
    public class Chip8System
    {
        private Memory memory;
        private Display display;
        private Keypad keypad;
        private CPU cpu;

        private static byte[] FontData = new byte[]
            { 0xF0, 0x90, 0x90, 0x90, 0xF0,     0x20, 0x60, 0x20, 0x20, 0x70,
              0xF0, 0x10, 0xF0, 0x80, 0xF0,     0xF0, 0x10, 0xF0, 0x10, 0xF0,
              0x90, 0x90, 0xF0, 0x10, 0x10,     0xF0, 0x80, 0xF0, 0x10, 0xF0,
              0xF0, 0x80, 0xF0, 0x90, 0xF0,     0xF0, 0x10, 0x20, 0x40, 0x40,
              0xF0, 0x90, 0xF0, 0x90, 0xF0,     0xF0, 0x90, 0xF0, 0x10, 0xF0,
              0xF0, 0x90, 0xF0, 0x90, 0x90,     0xE0, 0x90, 0xE0, 0x90, 0xE0,
              0xF0, 0x80, 0x80, 0x80, 0xF0,     0xE0, 0x90, 0x90, 0x90, 0xE0,
              0xF0, 0x80, 0xF0, 0x80, 0xF0,     0xF0, 0x80, 0xF0, 0x80, 0x80
            };

        public Chip8System(byte[] programData, KeypadInputAdaptor inputAdaptor)
        {
            memory = new Memory(FontData, programData);
            display = new Display();
            keypad = new Keypad(inputAdaptor);
            cpu = new CPU(memory, display, keypad);
        }

        public Memory GetMemory()
        {
            return memory;
        }

        public CPU GetCPU()
        {
            return cpu;
        }

        public Display GetDisplay()
        {
            return display;
        }
    }
}
